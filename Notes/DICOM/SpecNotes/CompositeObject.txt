A 'Composite Object' is in effect a .dcm file.

But it's not the fact that its got a .dcm extensionn that makes it a composite object - rather it's (as long as it's conformant) the inclusion of all the facets and constraints demanded of a given composite object. A properly formed .dcm file therefore is the physical manifestation, the realworld implementation, of the theoretical concept of a 'composite object'. It's the conformance to the DICOM spec that gives the file its utility and interoperability.

It's helpful to remember that per composite object, everything that is required to accurately position the instance in the DICOM hierarchy model (Patient>Study>Series>Instance) is encapsulated. I.e. each .dcm file does not require the presence of any adjcacent or parent data structure to give it such context. This leads of course to mass duplication across images of much of the same data but is a core facet of the design decision to encapsulate the entire compositional model that DICOM is based on. That's in contrast to a different format of medical image, NIfTI, which has an image dataset in one file and a co-located JSON metadata file. 

This is putting spec-specific wording to one of the reasons why Ambra's other_ingress_tags anonymisation feature is a bit nonconformant to the spec, because it's applied account wide, and has no provision to discern between SOP Classes for conditional application. The issue here is that if the SOP instance it is anonymising doesn't have one of the tag's listed in other_ingress_tags it will create that tag rather than checking to see if it's there and anonymising it if so. This means that the IOD for that SOP Class is not respected. (Note there are other issues with Ambra anon, e.g. no checks on VR conformance) 

A composite object is a somewhat deliberately ambiguous term because the actual stipulations of whats required for a given composite object is governed largley by the SOP Class, i.e. what imaging we're talking about. Of course there are core requirements for all .dcm composite object files, like the premable, the prefix, the file meta information, and some miniumum data element requirements of the outermost dataset in any file. 